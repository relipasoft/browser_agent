import os
os.environ["PYDANTIC_V1_COMPAT_MODE"] = "true"

import sys
if sys.platform == "win32":
    import asyncio
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

import asyncio
import logging
import traceback
import platform
import json  # D√πng ƒë·ªÉ ƒë√≥ng g√≥i message th√†nh JSON
from datetime import datetime
from enum import Enum
from typing import List, Optional
from langchain_openai import ChatOpenAI
from langchain_ollama import ChatOllama
from fastapi import FastAPI, BackgroundTasks, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv

# ----------------------------
# 1. Configure Global Logging
# ----------------------------

# B·ªô l·ªçc ch·ªâ cho ph√©p log t·ª´ module browser_use.agent v√† c√°c module con c·ªßa n√≥.
class AgentOnlyFilter(logging.Filter):
    def filter(self, record):
        return record.name.startswith("browser_use.agent")

# Custom Logging Handler g·ª≠i log t·ªõi m·ªôt WebSocket c·ª• th·ªÉ,
# ƒë√≥ng g√≥i message theo ƒë·ªãnh d·∫°ng JSON:
# {
#    "type": <"process" ho·∫∑c "result">,
#    "message": <n·ªôi dung log>
# }
class WebSocketTaskLogHandler(logging.Handler):
    def __init__(self, websocket: WebSocket):
        super().__init__()
        self.websocket = websocket

    def emit(self, record):
        try:
            # L·∫•y n·ªôi dung message theo formatter (·ªü ƒë√¢y ch√∫ng ta s·∫Ω d√πng formatter "%(message)s")
            message_text = self.format(record)
            # N·∫øu logger name l√† "browser_use.agent.final" th√¨ ƒë√¢y l√† log final result.
            msg_type = "result" if record.name == "browser_use.agent.final" else "process"
            payload = {"type": msg_type, "message": message_text}
            payload_str = json.dumps(payload)
            # G·ª≠i message kh√¥ng ƒë·ªìng b·ªô qua websocket.
            asyncio.create_task(self.websocket.send_text(payload_str))
        except Exception:
            self.handleError(record)

# C·∫•u h√¨nh logging to√†n c·ª•c cho console (v·∫´n gi·ªØ timestamp, level,...)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
root_logger = logging.getLogger()

# ----------------------------
# 2. Load Environment Variables
# ----------------------------
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("OPENAI_API_KEY not found in .env file. Please configure your .env file correctly.")

# ----------------------------
# 3. Initialize FastAPI App
# ----------------------------
app = FastAPI(title="AI Agent API with BrowserUse", version="1.0")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Trong production, h√£y gi·ªõi h·∫°n origin cho ph√©p.
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ----------------------------
# 4. Define Pydantic Models
# ----------------------------
class TaskRequest(BaseModel):
    task: str

class TaskResponse(BaseModel):
    result: str

class TaskStatus(str, Enum):
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"

class TaskRecord(BaseModel):
    id: int
    task: str
    status: TaskStatus
    start_time: datetime
    end_time: Optional[datetime] = None
    duration: Optional[float] = None  # Duration in seconds
    result: Optional[str] = None
    error: Optional[str] = None

# ----------------------------
# 5. Global Task Registry
# ----------------------------
task_records: List[TaskRecord] = []
task_id_counter: int = 0
task_lock = asyncio.Lock()

# ----------------------------
# 6. Helper Functions & Background Task Function
# ----------------------------
from browser_use.browser.browser import Browser, BrowserConfig
from browser_use import Agent
from langchain_openai import ChatOpenAI

def get_chrome_path() -> str:
    """
    Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n c·ªßa Chrome d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh.
    """
    system = platform.system()
    if system == "Windows":
        chrome_path = os.path.join(
            os.environ.get("PROGRAMFILES", "C:\\Program Files"),
            "Google\\Chrome\\Application\\chrome.exe"
        )
    elif system == "Darwin":
        chrome_path = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
    elif system == "Linux":
        chrome_path = "/usr/bin/google-chrome"
    else:
        raise FileNotFoundError(f"Unsupported operating system: {system}")
    
    if not os.path.exists(chrome_path):
        raise FileNotFoundError(f"Google Chrome executable not found at: {chrome_path}")
    return chrome_path

async def execute_task(task_id: int, task: str):
    """
    Th·ª±c hi·ªán Agent:
      - C·∫≠p nh·∫≠t task record.
      - Kh·ªüi t·∫°o Browser v√† Agent.
      - Ch·∫°y Agent v√† ghi log k·∫øt qu·∫£.
    """
    global task_records
    browser = None
    try:
        # Ghi log b·∫Øt ƒë·∫ßu task b·∫±ng logger c√≥ namespace "browser_use.agent"
        # logging.getLogger("browser_use.agent").info(f"üöÄ Starting task: {{\"task\":\"{task}\"}}")
        async with task_lock:
            task_record = TaskRecord(
                id=task_id,
                task=task,
                status=TaskStatus.RUNNING,
                start_time=datetime.utcnow()
            )
            task_records.append(task_record)
        
        # logging.getLogger("browser_use.agent").info(f"Task ID {task_id}: Initializing new browser instance.")
        browser = Browser(
            config=BrowserConfig(
                chrome_instance_path=get_chrome_path(),
                disable_security=True,
                headless=False,  # ƒê·ªïi th√†nh True n·∫øu mu·ªën ch·∫°y ·∫©n
            )
        )
        # logging.getLogger("browser_use.agent").info(f"Task ID {task_id}: Browser initialized successfully.")
        
        # Kh·ªüi t·∫°o Agent v·ªõi Browser v√† ChatOpenAI LLM.
        agent = Agent(
            task=task,
            llm=ChatOpenAI(model="gpt-4o", api_key=api_key),
            # llm=ChatOllama(model="qwen2.5",num_ctx=32000),
            browser=browser
        )
        logging.getLogger("browser_use.agent").info(f"Agent initialized. Running task.")
        result = await agent.run()
        # Log th√¥ng b√°o Agent.run() ho√†n th√†nh tr∆∞·ªõc
        logging.getLogger("browser_use.agent").info(f"Task ID {task_id}: Agent run completed successfully.")
        # Sau ƒë√≥, l·∫•y k·∫øt qu·∫£ cu·ªëi c√πng v√† log v·ªõi logger c√≥ namespace "browser_use.agent.final"
        final_result = result.final_result()
        logging.getLogger("browser_use.agent.final").info(f"{final_result}")
        
        async with task_lock:
            for record in task_records:
                if record.id == task_id:
                    record.status = TaskStatus.COMPLETED
                    record.end_time = datetime.utcnow()
                    record.duration = (record.end_time - record.start_time).total_seconds()
                    record.result = str(final_result)
                    break

    except Exception as e:
        logging.getLogger("browser_use.agent").error(f"Error in background task ID {task_id}: {e}")
        logging.getLogger("browser_use.agent").error(traceback.format_exc())
        async with task_lock:
            for record in task_records:
                if record.id == task_id:
                    record.status = TaskStatus.FAILED
                    record.end_time = datetime.utcnow()
                    record.duration = (record.end_time - record.start_time).total_seconds()
                    record.error = str(e)
                    break
    finally:
        if browser:
            try:
                logging.getLogger("browser_use.agent").info(f"Task ID {task_id}: Closing browser instance.")
                await browser.close()
                logging.getLogger("browser_use.agent").info(f"Task ID {task_id}: Browser closed successfully.")
            except Exception as close_e:
                logging.getLogger("browser_use.agent").error(f"Task ID {task_id}: Error closing browser: {close_e}")
                logging.getLogger("browser_use.agent").error(traceback.format_exc())

# ----------------------------
# 7. WebSocket Endpoint /ws/run (K·∫øt h·ª£p ch·∫°y task v√† nh·∫≠n log)
# ----------------------------
@app.websocket("/ws/run")
async def websocket_run(websocket: WebSocket):
    """
    Client k·∫øt n·ªëi qua WebSocket, g·ª≠i nhi·ªám v·ª• c·∫ßn ch·∫°y (chu·ªói vƒÉn b·∫£n).
    Server s·∫Ω g·∫Øn handler t·∫°m th·ªùi ƒë·ªÉ ƒë·∫©y log (ch·ªâ log t·ª´ browser_use.agent)
    v·ªõi ƒë·ªãnh d·∫°ng JSON theo pattern:
      {
          "type": <"process" ho·∫∑c "result">,
          "message": <n·ªôi dung log>
      }
    Trong ƒë√≥, log t·ª´ qu√° tr√¨nh th·ª±c thi c√≥ type "process" v√† final result c√≥ type "result".
    Sau khi task ho√†n th√†nh, server g·ª≠i th√¥ng b√°o "Task finished." r·ªìi ƒë√≥ng k·∫øt n·ªëi.
    """
    await websocket.accept()
    try:
        # Nh·∫≠n th√¥ng ƒëi·ªáp nhi·ªám v·ª• t·ª´ client
        data = await websocket.receive_text()
        task = data.strip()
        if not task:
            await websocket.send_text(json.dumps({"type": "error", "message": "Task is empty!"}))
            await websocket.close()
            return

        # C·∫≠p nh·∫≠t task id
        global task_id_counter
        async with task_lock:
            task_id_counter += 1
            current_task_id = task_id_counter

        # T·∫°o handler t·∫°m th·ªùi g·ª≠i log c·ªßa browser_use.agent ƒë·∫øn k·∫øt n·ªëi n√†y.
        temp_handler = WebSocketTaskLogHandler(websocket)
        temp_handler.setLevel(logging.INFO)
        # Formatter ch·ªâ hi·ªÉn th·ªã message (lo·∫°i b·ªè datetime, level, ...)
        temp_handler.setFormatter(logging.Formatter("%(message)s"))
        temp_handler.addFilter(AgentOnlyFilter())
        root_logger.addHandler(temp_handler)

        # logging.getLogger("browser_use.agent").info(f"Received task via WebSocket: {task}")
        # Ch·∫°y task (await tr·ª±c ti·∫øp)
        await execute_task(current_task_id, task)
    except Exception as e:
        logging.getLogger("browser_use.agent").error(f"Error executing task via WebSocket: {e}")
    finally:
        # Lo·∫°i b·ªè handler t·∫°m th·ªùi
        root_logger.removeHandler(temp_handler)
        try:
            await websocket.send_text(json.dumps({"type": "info", "message": "Task finished."}))
        except Exception:
            pass
        await websocket.close()
